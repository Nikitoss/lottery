import { Layout, Row, Space } from "antd";
import { useState } from "react";
import { getEthersProvider, getMetamaskProvider } from "utils";
import { LotteryAddressForm } from "./LotteryAddressForm";
import { NoWalletDetected } from "./NoWalletDetected";
import { Lottery, LotteryInterface } from '../typechain/Lottery';
import { LotteryInfo } from "./LotteryInfo";
import { ErrorList } from "./ErrorList";
import { ethers } from "ethers";
import LotteryArtefact from "Lottery.sol/Lottery.json";


interface IProps {
    address: string;
}

let lottery: Lottery | undefined = undefined;

export function Content({ address }: IProps) {
    // const [lotteryAddress, setLotteryAddress] = useState("0x5FbDB2315678afecb367f032d93F642f64180aa3");
    const [lotteryAddress, setLotteryAddress] = useState("");
    const [errorList, setErrorList] = useState<string[]>(["Пробная ошибка"]);

    const handleCreateNewLottery = async () => {

        // var _lotteryDuration = /* var of type uint256 here */ ;
        // var _ticketPrice = /* var of type uint256 here */ ;
        // var _prizeAmount = /* var of type uint256 here */ ;
        // var lotteryContract = new web3.eth.Contract([{ "inputs": [{ "internalType": "uint256", "name": "_lotteryDuration", "type": "uint256" }, { "internalType": "uint256", "name": "_ticketPrice", "type": "uint256" }, { "internalType": "uint256", "name": "_prizeAmount", "type": "uint256" }], "stateMutability": "nonpayable", "type": "constructor" }, { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "winner", "type": "address" }], "name": "LotteryFinish", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "player", "type": "address" }], "name": "LotteryTicketPurchased", "type": "event" }, { "inputs": [], "name": "buyLotteryTicket", "outputs": [], "stateMutability": "payable", "type": "function" }, { "inputs": [], "name": "end", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "finishLottery", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [], "name": "getPlayers", "outputs": [{ "internalType": "address[]", "name": "", "type": "address[]" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "isAlive", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "isEnded", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "isManager", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "lotteryDuration", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "prizeAmount", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "start", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "ticketPrice", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" }, { "stateMutability": "payable", "type": "receive" }]);
        // var lottery = lotteryContract.deploy({
        //     data: '',
        //     arguments: [
        //         _lotteryDuration,
        //         _ticketPrice,
        //         _prizeAmount,
        //     ]
        // }).send({
        //     from: web3.eth.accounts[0],
        //     gas: '4700000'
        // }, function (e, contract) {
        //     console.log(e, contract);
        //     if (typeof contract.address !== 'undefined') {
        //         console.log('Contract mined! address: ' + contract.address + ' transactionHash: ' + contract.transactionHash);
        //     }
        // })

        // TODO

        const signer = getEthersProvider()?.getSigner(address || 0);

        const lotteryFactory = new ethers.ContractFactory(
            LotteryArtefact.abi,
            LotteryArtefact.bytecode,
            signer
        );

        const lottery = await lotteryFactory.deploy(5 * 60, ethers.utils.parseEther("0.01"), ethers.utils.parseEther("0.12"));
        await lottery.deployed();
        setLotteryAddress(lottery.address);
        console.log("\t📍lottery.address: %s", lottery.address);
    }

    const handleAddError = (error: any) => {
        debugger;
        let e = error?.message || error.toString();

        setErrorList((errorList: string[]) => {
            return [...errorList, e];
        });
    }

    const metamaskProvider = getMetamaskProvider();

    return (
        <Layout.Content
            className="site-layout-content"
        >
            <ErrorList errors={errorList} />
            {!metamaskProvider && (<NoWalletDetected />)}
            {metamaskProvider && !lotteryAddress && (
                <LotteryAddressForm
                    setLotteryAddress={setLotteryAddress}
                    createNewLottery={handleCreateNewLottery}
                />
            )}
            {metamaskProvider && lotteryAddress && (
                <LotteryInfo
                    signerAddress={address}
                    lotteryAddress={lotteryAddress}
                    addError={handleAddError}
                />

            )}

        </Layout.Content>
    );
}