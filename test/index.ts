import { expect } from "chai";
import { ethers } from "hardhat";
import { SignerWithAddress } from "@nomiclabs/hardhat-ethers/signers";
import { Lottery } from "../typechain";
import { ContractTransaction } from "ethers";
const { time } = require("@openzeppelin/test-helpers");

describe("Lottery", function () {
    const lotteryDuration = 1; //days
    //                                    40000000000000 - average cost of empty transaction
    //                                   130000000000000 - average cost of transaction
    const ticketPrice = ethers.utils.parseEther("0.01");
    const prizeAmount = ethers.utils.parseEther("0.12");
    let lottery: Lottery;
    let addrs: SignerWithAddress[];
    let [
        manager,
        addr1,
        addr2,
        addr3,
        addr4,
        addr5,
        addr6,
        ...addr
    ]: SignerWithAddress[] = [];
    let lotteryAddress: SignerWithAddress;

    this.beforeAll(async function () {
        const LotteryFactory = await ethers.getContractFactory("Lottery");
        [manager, addr1, addr2, addr3, addr4, addr5, addr6, ...addr] =
            await ethers.getSigners();
        lottery = await LotteryFactory.deploy(
            lotteryDuration,
            ticketPrice,
            prizeAmount,
        );
        await lottery.deployed();
        lotteryAddress = await ethers.getSigner(lottery.address);
        console.log("\tüìçlottery.address: %s", lottery.address);
    });

    describe("–î–µ–ø–ª–æ–π", function () {
        it("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ—Ç–µ—Ä–µ–∏", async function () {
            expect(await lottery.isManager()).to.equal(
                true,
                "–ú–µ–Ω–µ–¥–∂–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–µ –≤–µ—Ä–Ω–æ",
            );
            expect(await lottery.lotteryDuration()).to.equal(
                lotteryDuration,
                "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ª–æ—Ç–µ—Ä–µ–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–µ –≤–µ—Ä–Ω–æ",
            );
            expect(await lottery.ticketPrice()).to.equal(
                ticketPrice,
                "–°—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–µ –≤–µ—Ä–Ω–æ",
            );
            expect(await lottery.prizeAmount()).to.equal(
                prizeAmount,
                "–†–∞–∑–º–µ—Ä –ø—Ä–∏–∑–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–µ –≤–µ—Ä–Ω–æ",
            );
            const players = await lottery.getPlayers();
            expect(players.length).to.equal(
                0,
                "–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –Ω–∞—á–∞–ª–µ –ª–æ—Ç–µ—Ä–µ–∏ –Ω–µ –ø—É—Å—Ç",
            );
            expect(await lottery.isEnded()).to.equal(
                false,
                "–õ–æ—Ç–µ—Ä–µ—è –Ω–µ–æ–∂–∏–¥–∞–Ω–æ –∫–æ–Ω—á–∏–ª–∞—Å—å",
            );
        });
    });

    describe("–ü–æ–∫—É–ø–∫–∞ –ª–æ—Ç–µ—Ä–µ–π–Ω–æ–≥–æ –±–∏–ª–µ—Ç–∞", function () {
        it("HappyPath, –ø–æ–∫—É–ø–∫–∞ —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é 'buyLotteryTicket'", async function () {
            // –°–º—ã—Å–ª–∞ –ø—Ä–æ–≤–µ—Ä—è—Ç—å, –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –ª–∏ –ª–æ—Ç–µ—Ä–µ—è –Ω–µ –æ—á–µ–Ω—å –º–Ω–æ–≥–æ, –Ω–æ –ø—É—Å—Ç—å –±—É–¥–µ—Ç.
            expect(await lottery.isEnded()).to.equal(
                false,
                "–õ–æ—Ç–µ—Ä–µ—è –Ω–µ–æ–∂–∏–¥–∞–Ω–æ –∫–æ–Ω—á–∏–ª–∞—Å—å",
            );
            let players = await lottery.getPlayers();
            expect(players.length).to.equal(
                0,
                "–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –Ω–∞—á–∞–ª–µ –ª–æ—Ç–µ—Ä–µ–∏ –Ω–µ –ø—É—Å—Ç",
            );

            let request: ContractTransaction;

            // –ó–¥–µ—Å—å —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫.
            // –õ—É—á—à–µ –±—ã —Ä–∞–∑–¥–µ–ª–∏—Ç—å —ç—Ç–æ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤.
            // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è
            // - –ß—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Å–æ–±—ã—Ç–∏–µ LotteryTicketPurchased
            // - –ß—Ç–æ –∞–¥—Ä–µ—Å –ª–æ—Ç–µ—Ä–µ–∏ –ø–æ–ª—É—á–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–∞
            // - –ß—Ç–æ —Å –∞–¥—Ä–µ—Å–∞ –∏–≥—Ä–æ–∫–∞ —Ç—Ä–∞—Ç–∏—Ç—Å—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–∞ (–±–µ–∑ —É—á—ë—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≥–∞–∑–∞)
            await expect(
                await lottery
                    .connect(addr1)
                    .buyLotteryTicket({ value: ticketPrice }),
                "–õ–æ—Ç–µ—Ä–µ—è –ø–æ–ª—É—á–∏–ª–∞ –æ—Ç–ª–∏—á–Ω–æ–µ –æ—Ç —Ü–µ–Ω—ã –±–∏–ª–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ñ–∏—Ä–∞",
            )
                .to.changeEtherBalances(
                    [addr1, lotteryAddress],
                    [ticketPrice.mul("-1"), ticketPrice],
                )
                .to.emit(lottery, "LotteryTicketPurchased");

            expect(
                await lottery.isEnded(),
                "–õ–æ—Ç–µ—Ä–µ—è –Ω–µ–æ–∂–∏–¥–∞–Ω–æ –∫–æ–Ω—á–∏–ª–∞—Å—å",
            ).to.equal(false);
            players = await lottery.getPlayers();
            expect(players.length).to.equal(
                1,
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ª–æ—Ç–µ—Ä–µ–∏ –Ω–µ –≤–µ—Ä–Ω–æ",
            );
            expect(players[0]).to.equal(
                await addr1.getAddress(),
                "–í —Å–ø–∏—Å–∫–µ –∏–≥—Ä–æ–∫–æ–≤ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫",
            );
        });

        it("HappyPath, –ø–æ–∫—É–ø–∫–∞ —á–µ—Ä–µ–∑ –ø–æ—Å—ã–ª–∫—É –¥–µ–Ω–µ–≥ –Ω–∞ –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞", async function () {
            expect(await lottery.isEnded()).to.equal(
                false,
                "–õ–æ—Ç–µ—Ä–µ—è –Ω–µ–æ–∂–∏–¥–∞–Ω–æ –∫–æ–Ω—á–∏–ª–∞—Å—å",
            );
            let players = await lottery.getPlayers();
            expect(players.length).to.equal(
                1,
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ª–æ—Ç–µ—Ä–µ–∏ –Ω–µ –≤–µ—Ä–Ω–æ",
            );

            // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è
            // - –ß—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Å–æ–±—ã—Ç–∏–µ LotteryTicketPurchased
            // - –ß—Ç–æ –∞–¥—Ä–µ—Å –ª–æ—Ç–µ—Ä–µ–∏ –ø–æ–ª—É—á–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–∞
            // - –ß—Ç–æ —Å –∞–¥—Ä–µ—Å–∞ –∏–≥—Ä–æ–∫–∞ —Ç—Ä–∞—Ç–∏—Ç—Å—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–∞ (–±–µ–∑ —É—á—ë—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≥–∞–∑–∞)
            await expect(
                await addr2.sendTransaction({
                    to: lottery.address,
                    value: ticketPrice,
                }),
                "–õ–æ—Ç–µ—Ä–µ—è –ø–æ–ª—É—á–∏–ª–∞ –æ—Ç–ª–∏—á–Ω–æ–µ –æ—Ç —Ü–µ–Ω—ã –±–∏–ª–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ñ–∏—Ä–∞",
            )
                .to.changeEtherBalances(
                    [addr2, lotteryAddress],
                    [ticketPrice.mul("-1"), ticketPrice],
                )
                .to.emit(lottery, "LotteryTicketPurchased");

            expect(await lottery.isEnded()).to.equal(
                false,
                "–õ–æ—Ç–µ—Ä–µ—è –Ω–µ–æ–∂–∏–¥–∞–Ω–æ –∫–æ–Ω—á–∏–ª–∞—Å—å",
            );
            players = await lottery.getPlayers();
            expect(players.length).to.equal(
                2,
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ª–æ—Ç–µ—Ä–µ–∏ –Ω–µ –≤–µ—Ä–Ω–æ",
            );
            expect(players[1]).to.equal(
                await addr2.getAddress(),
                "–í —Å–ø–∏—Å–∫–µ –∏–≥—Ä–æ–∫–æ–≤ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫",
            );
        });

        it("–î–æ–ª–∂–µ–Ω —É–ø–∞—Å—Ç—å, –µ—Å–ª–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏—Ç –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—É—é –¥–ª—è –±–∏–ª–µ—Ç–∞ —Å—É–º–º—É —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é 'buyLotteryTicket'", async function () {
            expect(await lottery.isEnded()).to.equal(
                false,
                "–õ–æ—Ç–µ—Ä–µ—è –Ω–µ–æ–∂–∏–¥–∞–Ω–æ –∫–æ–Ω—á–∏–ª–∞—Å—å",
            );
            let players = await lottery.getPlayers();
            expect(players.length).to.equal(
                2,
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ª–æ—Ç–µ—Ä–µ–∏ –Ω–µ –≤–µ—Ä–Ω–æ",
            );

            // const initialAddr3Balance = await addr3.getBalance();

            await expect(
                lottery
                    .connect(addr3)
                    .buyLotteryTicket({ value: ticketPrice.sub(1) }),
            ).to.be.revertedWith("Price is wrong");

            expect(await lottery.isEnded()).to.equal(
                false,
                "–õ–æ—Ç–µ—Ä–µ—è –Ω–µ–æ–∂–∏–¥–∞–Ω–æ –∫–æ–Ω—á–∏–ª–∞—Å—å",
            );
            players = await lottery.getPlayers();
            expect(players.length).to.equal(
                2,
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ª–æ—Ç–µ—Ä–µ–∏ –Ω–µ –≤–µ—Ä–Ω–æ",
            );
        });

        it("–î–æ–ª–∂–µ–Ω —É–ø–∞—Å—Ç—å, –µ—Å–ª–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏—Ç –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—É—é –¥–ª—è –±–∏–ª–µ—Ç–∞ —Å—É–º–º—É —á–µ—Ä–µ–∑ receive", async function () {
            expect(await lottery.isEnded()).to.equal(
                false,
                "–õ–æ—Ç–µ—Ä–µ—è –Ω–µ–æ–∂–∏–¥–∞–Ω–æ –∫–æ–Ω—á–∏–ª–∞—Å—å",
            );
            let players = await lottery.getPlayers();
            expect(players.length).to.equal(
                2,
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ª–æ—Ç–µ—Ä–µ–∏ –Ω–µ –≤–µ—Ä–Ω–æ",
            );

            expect(
                addr4.sendTransaction({
                    to: lottery.address,
                    value: ticketPrice.sub(1),
                }),
            ).to.be.revertedWith("Price is wrong");

            expect(await lottery.isEnded()).to.equal(
                false,
                "–õ–æ—Ç–µ—Ä–µ—è –Ω–µ–æ–∂–∏–¥–∞–Ω–æ –∫–æ–Ω—á–∏–ª–∞—Å—å",
            );
            players = await lottery.getPlayers();
            expect(players.length).to.equal(
                2,
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ª–æ—Ç–µ—Ä–µ–∏ –Ω–µ –≤–µ—Ä–Ω–æ",
            );
        });

        it("–ü—Ä–æ–≤–µ—Ä–∫–∞ isEnded –¥–æ –∏ –ø–æ—Å–ª–µ –∫–æ–Ω—Ü–∞ –ª–æ—Ç–µ—Ä–µ–∏", async function () {
            expect(await lottery.isEnded()).to.equal(
                false,
                "–õ–æ—Ç–µ—Ä–µ—è –Ω–µ–æ–∂–∏–¥–∞–Ω–æ –∫–æ–Ω—á–∏–ª–∞—Å—å",
            );
            await time.increase(time.duration.days(lotteryDuration));
            expect(await lottery.isEnded()).to.equal(
                true,
                "–í—Ä–µ–º—è –µ—â—ë –Ω–µ –∫–æ–Ω—á–∏–ª–æ—Å—å",
            );
        });
    });

    describe("–†–æ–∑—ã–≥—Ä—ã—à –ª–æ—Ç–µ—Ä–µ–∏", function () {
        this.beforeEach(async function () {
            const LotteryFactory = await ethers.getContractFactory("Lottery");
            [manager, ...addr] = await ethers.getSigners();
            lottery = await LotteryFactory.deploy(
                lotteryDuration,
                ticketPrice,
                prizeAmount,
            );
            await lottery.deployed();
            lotteryAddress = await ethers.getSigner(lottery.address);
            console.log("\tüìçlottery.address: %s", lottery.address);
        });

        it("HappyPath", async function () {
            expect(await lottery.isEnded()).to.equal(
                false,
                "–õ–æ—Ç–µ—Ä–µ—è –Ω–µ–æ–∂–∏–¥–∞–Ω–æ –∫–æ–Ω—á–∏–ª–∞—Å—å",
            );
            let players = await lottery.getPlayers();
            expect(players.length).to.equal(
                0,
                "–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –Ω–∞—á–∞–ª–µ –ª–æ—Ç–µ—Ä–µ–∏ –Ω–µ –ø—É—Å—Ç",
            );

            // const initialManagerBalance = await manager.getBalance();

            const contractTransactions: Promise<ContractTransaction>[] = [];

            for (const account of addr) {
                contractTransactions.push(
                    lottery
                        .connect(account)
                        .buyLotteryTicket({ value: ticketPrice }),
                );
            }

            await Promise.all(contractTransactions);

            expect(await lottery.isEnded()).to.equal(
                false,
                "–õ–æ—Ç–µ—Ä–µ—è –Ω–µ–æ–∂–∏–¥–∞–Ω–æ –∫–æ–Ω—á–∏–ª–∞—Å—å",
            );
            players = await lottery.getPlayers();
            expect(players.length).to.equal(
                addr.length,
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ª–æ—Ç–µ—Ä–µ–∏ –Ω–µ –≤–µ—Ä–Ω–æ",
            );

            await time.increase(time.duration.days(lotteryDuration));

            expect(await lottery.isEnded()).to.equal(
                true,
                "–í—Ä–µ–º—è –µ—â—ë –Ω–µ –∫–æ–Ω—á–∏–ª–æ—Å—å",
            );

            const startLotteryBalance = await ethers.provider.getBalance(
                lottery.address,
            );

            const transactionPromise = lottery.finishLottery();

            // –¢—É–ø–æ, —á—Ç–æ –∞–¥—Ä–µ—Å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è —è –≤—ã—Ç–∞—Å–∫–∏–≤–∞—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–±—ã—Ç–∏—è, —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–≥–æ —è –ø—Ä–æ–≤–µ—Ä—è—é –ø–æ–∑–∂–µ.
            // –ü—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–æ–∏—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç—å –Ω–∞ —á–µ—Ç—ã—Ä–µ expect —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Ç–µ–∫—Å—Ç–∞–º–∏ –æ—à–∏–±–æ–∫.
            const transaction = await transactionPromise;
            const recept = await transaction.wait();
            const winnerAddress = await ethers.getSigner(
                recept.events?.[0].args?.winner,
            );

            // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è
            // - –ß—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Å–æ–±—ã—Ç–∏–µ LotteryFinish
            // - –ß—Ç–æ –∞–¥—Ä–µ—Å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –ø–æ–ª—É—á–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–∏–∑–∞
            // - –ß—Ç–æ –∞–¥—Ä–µ—Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ–ª—É—á–∞–µ—Ç –æ—Å—Ç–∞—Ç–æ—á–Ω—É—é —Å—Ç–æ–º–æ—Å—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à–∞
            // - –ß—Ç–æ –∞–¥—Ä–µ—Å –ª–æ—Ç–µ—Ä–µ–∏ –ª–∏—à–∞–µ—Ç—Å—è –≤—Å–µ–≥–æ –≤—ã–∏–≥—Ä—ã—à–∞
            await expect(
                transaction,
                "–ë–∞–ª–∞–Ω—Å –ª–æ—Ç–µ—Ä–µ–∏ –Ω–µ –æ–±–Ω—É–ª–∏–ª—Å—è –∏–ª–∏ —Å–æ–±—ã—Ç–∏–µ –Ω–µ –≤—ã–∑–≤–∞–ª–æ—Å—å",
            )
                .to.changeEtherBalances(
                    [winnerAddress, manager, lotteryAddress],
                    [
                        prizeAmount,
                        startLotteryBalance.sub(prizeAmount),
                        startLotteryBalance.mul(-1),
                    ],
                )
                .to.emit(lottery, "LotteryFinish");

            const endLotteryBalance = await ethers.provider.getBalance(
                lottery.address,
            );

            expect(endLotteryBalance.toString()).to.equal(
                "0",
                "–ë–∞–ª–∞–Ω—Å –ª–æ—Ç–µ—Ä–µ–∏ –Ω–µ –æ–±–Ω—É–ª–∏–ª—Å—è",
            );

            expect(lottery.isEnded(), "–ö–æ–Ω—Ç—Ä–∞–∫—Ç –ª–æ—Ç–µ—Ä–µ–∏ –Ω–µ –±—ã–ª —É–¥–∞–ª—ë–Ω").to.be
                .reverted;
        });

        it("–û–∫–æ–Ω—á–∞–Ω–∏–µ –ª–æ—Ç–µ—Ä–µ–∏ –ø—Ä–∏ –Ω–µ–¥–æ–±–æ—Ä–µ —Å—É–º–º—ã –≤—ã–∏–≥—Ä—ã—à–∞", async function () {
            expect(await lottery.isEnded()).to.equal(
                false,
                "–õ–æ—Ç–µ—Ä–µ—è –Ω–µ–æ–∂–∏–¥–∞–Ω–æ –∫–æ–Ω—á–∏–ª–∞—Å—å",
            );
            let players = await lottery.getPlayers();
            expect(players.length).to.equal(
                0,
                "–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –Ω–∞—á–∞–ª–µ –ª–æ—Ç–µ—Ä–µ–∏ –Ω–µ –ø—É—Å—Ç",
            );

            await lottery
                .connect(addr1)
                .buyLotteryTicket({ value: ticketPrice });
            await lottery
                .connect(addr2)
                .buyLotteryTicket({ value: ticketPrice });
            await lottery
                .connect(addr3)
                .buyLotteryTicket({ value: ticketPrice });

            expect(await lottery.isEnded()).to.equal(false);
            players = await lottery.getPlayers();
            expect(players.length).to.equal(3);

            await time.increase(time.duration.days(lotteryDuration));

            expect(await lottery.isEnded()).to.equal(
                true,
                "–í—Ä–µ–º—è –µ—â—ë –Ω–µ –∫–æ–Ω—á–∏–ª–æ—Å—å",
            );

            const startLotteryBalance = await ethers.provider.getBalance(
                lottery.address,
            );

            const transactionPromise = lottery.finishLottery();

            // –¢—É–ø–æ, —á—Ç–æ –∞–¥—Ä–µ—Å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è —è –≤—ã—Ç–∞—Å–∫–∏–≤–∞—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–±—ã—Ç–∏—è, —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–≥–æ —è –ø—Ä–æ–≤–µ—Ä—è—é –ø–æ–∑–∂–µ.
            const transaction = await transactionPromise;
            const recept = await transaction.wait();
            const winnerAddress = await ethers.getSigner(
                recept.events?.[0].args?.winner,
            );

            // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è
            // - –ß—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Å–æ–±—ã—Ç–∏–µ LotteryFinish
            // - –ß—Ç–æ –∞–¥—Ä–µ—Å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –ø–æ–ª—É—á–∞–µ—Ç –≤–µ—Å—å –≤—ã–∏–≥—Ä—ã—à
            // - –ß—Ç–æ –∞–¥—Ä–µ—Å –ª–æ—Ç–µ—Ä–µ–∏ –ª–∏—à–∞–µ—Ç—Å—è –≤—Å–µ–≥–æ –≤—ã–∏–≥—Ä—ã—à–∞
            await expect(
                transaction,
                "–ë–∞–ª–∞–Ω—Å –ª–æ—Ç–µ—Ä–µ–∏ –Ω–µ –æ–±–Ω—É–ª–∏–ª—Å—è –∏–ª–∏ —Å–æ–±—ã—Ç–∏–µ –Ω–µ –≤—ã–∑–≤–∞–ª–æ—Å—å",
            )
                .to.changeEtherBalances(
                    [winnerAddress, lotteryAddress],
                    [startLotteryBalance, startLotteryBalance.mul(-1)],
                )
                .to.emit(lottery, "LotteryFinish");

            const endLotteryBalance = await ethers.provider.getBalance(
                lottery.address,
            );

            expect(endLotteryBalance.toString()).to.equal(
                "0",
                "–ë–∞–ª–∞–Ω—Å –ª–æ—Ç–µ—Ä–µ–∏ –Ω–µ –æ–±–Ω—É–ª–∏–ª—Å—è",
            );

            expect(lottery.isEnded(), "–ö–æ–Ω—Ç—Ä–∞–∫—Ç –ª–æ—Ç–µ—Ä–µ–∏ –Ω–µ –±—ã–ª —É–¥–∞–ª—ë–Ω").to.be
                .reverted;
        });

        it("–î–æ–ª–∂–µ–Ω —É–ø–∞—Å—Ç—å, –µ—Å–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ø—ã—Ç–∞–µ—Ç—Å—è —Ä–∞–∑—ã–≥—Ä–∞—Ç—å –ª–æ—Ç–µ—Ä–µ—é –¥–æ –µ—ë –æ–∫–æ–Ω—á–∞–Ω–∏—è", async function () {
            expect(await lottery.isEnded()).to.equal(
                false,
                "–õ–æ—Ç–µ—Ä–µ—è –Ω–µ–æ–∂–∏–¥–∞–Ω–æ –∫–æ–Ω—á–∏–ª–∞—Å—å",
            );
            let players = await lottery.getPlayers();
            expect(players.length).to.equal(
                0,
                "–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –Ω–∞—á–∞–ª–µ –ª–æ—Ç–µ—Ä–µ–∏ –Ω–µ –ø—É—Å—Ç",
            );

            const contractTransactions: Promise<ContractTransaction>[] = [];

            for (const account of addr) {
                contractTransactions.push(
                    lottery
                        .connect(account)
                        .buyLotteryTicket({ value: ticketPrice }),
                );
            }

            await Promise.all(contractTransactions);

            expect(await lottery.isEnded()).to.equal(
                false,
                "–õ–æ—Ç–µ—Ä–µ—è –Ω–µ–æ–∂–∏–¥–∞–Ω–æ –∫–æ–Ω—á–∏–ª–∞—Å—å",
            );
            players = await lottery.getPlayers();
            expect(players.length).to.equal(
                addr.length,
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ª–æ—Ç–µ—Ä–µ–∏ –Ω–µ –≤–µ—Ä–Ω–æ",
            );

            await expect(
                lottery.finishLottery(),
                "–ú–æ–∂–Ω–æ —Ä–∞–∑—ã–≥—Ä–∞—Ç—å –Ω–µ –æ–∫–æ–Ω—á–µ–Ω–Ω—É—é –ª–æ—Ç–µ—Ä–µ—é",
            ).to.be.revertedWith("is not over yet");
        });
    });
});
